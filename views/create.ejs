<!DOCTYPE html>
<html>

<head>
  <title><%= title %></title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body class="bg-light">
  <div class="container py-5">
    <h1 class="mb-4 text-center"><%= title %></h1>

    <div class="card mb-4">
      <div class="card-body">
        <h2 class="playlistTitle h4 mb-3">Loading...</h2>
        <h2 class="h5">Tracks to be added:</h2>
        <ul id="trackList" class="list-group mb-3"></ul>
      </div>
    </div>

    <form id="playlistForm" class="mb-4">
      <div class="form-group">
        <label for="playlistNameInput">Playlist Name:</label>
        <input type="text" class="form-control" id="playlistNameInput" name="playlistNameInput" required>
      </div>
      <div class="form-group">
        <label for="playlistDescriptionInput">Description:</label>
        <input type="text" class="form-control" id="playlistDescriptionInput" name="playlistDescriptionInput" value="Playlist Converted from Spotify by Spotify To YT Converter">
      </div>
      <div class="form-group">
        <label for="playlistPrivacySelect">Privacy:</label>
        <select class="form-control" id="playlistPrivacySelect" name="playlistPrivacySelect">
          <option value="public">Public</option>
          <option value="unlisted">Unlisted</option>
          <option value="private" selected>Private</option>
        </select>
      </div>
    </form>

    <div class="text-center">
      <button id="createPlaylistButton" class="btn btn-primary btn-lg">Create YouTube Playlist</button>
    </div>
  </div>

  <script>
    async function fetchPlaylistData() {
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const state = hashParams.get('state');
      const playlistId = state.split("_")[1];

      try {
        const response = await fetch(`/convert/getPlaylistData/${playlistId}`);
        const data = await response.json();
        const playlistData = data.playlistData; // Array of tracks as in sample2.json

        document.querySelectorAll('h2.playlistTitle')[0].textContent = playlistData.raw?.title || 'Playlist';
        document.getElementById("playlistNameInput").value = playlistData.raw?.title || 'Spotify Conversion';

        const trackList = document.getElementById('trackList');
        trackList.innerHTML = '';
        playlistData.trackList.forEach(item => {
          const mainResult = item.results && item.results[0];
          const ytTitle = mainResult ? mainResult.title : 'No Result';
          const ytUrl = mainResult ? mainResult.url : null;
          const li = document.createElement('li');
          li.className = "list-group-item d-flex justify-content-between align-items-center";
          li.textContent = `${item.title} - YouTube Result: ${ytTitle}`;
          if (ytUrl) {
            const a = document.createElement('a');
            a.href = ytUrl;
            a.target = '_blank';
            a.textContent = ' [link]';
            a.className = "badge badge-info ml-2";
            li.appendChild(a);
          }
          trackList.appendChild(li);
        });
      } catch (error) {
        console.error('Error fetching playlist data:', error);
      }
    }

    fetchPlaylistData();
  </script>

  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
</body>


<script>
  document.getElementById('createPlaylistButton').addEventListener('click', function() {
    createYoutubePlaylist();
  });

  async function createYoutubePlaylist() {

    async function getAccessToken(playlistId) {
      // Make a request to the server to get the access token
      const response = await fetch(`/convert/getAccessToken?playlistId=${playlistId}`);
      const data = await response.json();
      return data.accessToken;
    }

    const hashParams = new URLSearchParams(window.location.hash.substring(1));
    const state = hashParams.get('state');
    const accessToken = hashParams.get('access_token');
    const playlistName = document.getElementById("playlistNameInput").value;
    const playlistDescription = document.getElementById("playlistDescriptionInput").value;
    const playlistPrivacyStatus = document.getElementById("playlistPrivacySelect").value;
    const playlistId = state.split("_")[1];
    // eslint-disable-next-line
    const playlistData = await fetch(`/convert/getPlaylistData/${playlistId}`)
      .then(response => response.json())
      .then(data => data.playlistData);

    // Function to create the playlist
    async function createPlaylist(accessToken, playlistName, playlistDescription, playlistPrivacyStatus) {
      const url = 'https://www.googleapis.com/youtube/v3/playlists?part=snippet,status';
      const headers = {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      };
      const body = JSON.stringify({
        snippet: {
          title: playlistName,
          description: playlistDescription
        },
        status: {
          privacyStatus: playlistPrivacyStatus
        }
      });

      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: headers,
          body: body
        });

        const data = await response.json();
        if (data.error) {
          console.error('Error creating playlist:', data.error);
          return null;
        }
        console.log('Playlist created:', data);
        return data.id; // Return the playlist ID
      } catch (error) {
        console.error('Error creating playlist:', error);
        return null;
      }
    }

    // Function to add a video to the playlist
    async function addVideoToPlaylist(accessToken, playlistId, videoId) {
      const url = 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet';
      const headers = {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      };
      const body = JSON.stringify({
        snippet: {
          playlistId: playlistId,
          resourceId: {
            kind: 'youtube#video',
            videoId: videoId
          }
        }
      });

      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: headers,
          body: body
        });

        const data = await response.json();
        if (data.error) {
          console.error('Error adding video to playlist:', data.error);
          return false;
        }
        console.log('Video added to playlist:', data);
        return true;
      } catch (error) {
        console.error('Error adding video to playlist:', error);
        return false;
      }
    }

    // Main function to orchestrate playlist creation and video addition
    async function main() {
      // 1. Create the playlist
      const newPlaylistId = await createPlaylist(accessToken, playlistName, playlistDescription, playlistPrivacyStatus);

      if (!newPlaylistId) {
        console.error('Failed to create playlist.');
        return;
      }

      // 2. Add videos to the playlist
      console.log(playlistData)
      for (const item of playlistData.trackList) {
        if (item.results && item.results[0].url) {
          const videoId = item.results[0].url.split("=")[1]; // Extract video ID from URL
          console.log(`Adding video ${videoId} to playlist ${newPlaylistId}`);
          const added = await addVideoToPlaylist(accessToken, newPlaylistId, videoId);
          if (!added) {
            console.warn(`Failed to add video ${videoId} to playlist.`);
          }
        } else {
          console.warn(`No YouTube result for ${item.originalTrack}.`);
        }
      }

      console.log('Playlist creation and video addition complete!');
    }

    main();
  }
</script>

</html>